- name: set node types
  set_fact:
    master_node: "{{ ec2_ocp['master'] }}"
    infra_node: "{{ ec2_ocp['infra'] }}"
    app1_node: "{{ ec2_ocp['app1'] }}"
    app2_node: "{{ ec2_ocp['app2'] }}"
  when: not networking

- name: find ami for master
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[master_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[master_node].filter }}"
      architecture: "{{ ec2_instance_types[master_node].architecture }}"
  register: amis

- name: save ami for master
  set_fact:
    master_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for master
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[master_node].size }}"
    image: "{{ master_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_master: "{{ec2_name_prefix}}-master"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[master_node].disk_space }}"
        delete_on_termination: true
  register: master_output

- name: Ensure tags are present for master
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-master"
      Workshop_master: "{{ec2_name_prefix}}-master"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "master"
  with_indexed_items:
    - "{{ master_output.instance_ids }}"
  when: master_output.instance_ids is not none

- name: find ami for infra node
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[infra_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[infra_node].filter }}"
      architecture: "{{ ec2_instance_types[infra_node].architecture }}"
  register: amis

- name: save ami for infra
  set_fact:
    infra_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for infra
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[infra_node].size }}"
    image: "{{ infra_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_infra: "{{ec2_name_prefix}}-infra"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[infra_node].disk_space }}"
        delete_on_termination: true
      - device_name: /dev/sda2
        volume_type: gp2
        volume_size: 100
        delete_on_termination: true
  register: infra_output

- name: Ensure tags are present for infra
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-infra"
      Workshop_infra: "{{ec2_name_prefix}}-infra"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "infra"
  with_indexed_items:
    - "{{ infra_output.instance_ids }}"
  when: infra_output.instance_ids is not none

- name: find ami for app1
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[app1_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[app1_node].filter }}"
      architecture: "{{ ec2_instance_types[app1_node].architecture }}"
  register: amis

- name: save ami for app1
  set_fact:
    app1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for app1
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[app1_node].size }}"
    image: "{{ app1_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_app1: "{{ec2_name_prefix}}-app1"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[app1_node].disk_space }}"
        delete_on_termination: true
      - device_name: /dev/sda2
        volume_type: gp2
        volume_size: 100
        delete_on_termination: true
  register: app1_output

- name: Ensure tags are present for app1
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-app1"
      Workshop_app1: "{{ec2_name_prefix}}-app1"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "app1"
  with_indexed_items:
    - "{{ app1_output.instance_ids }}"
  when: app1_output.instance_ids is not none

- name: find ami for app2
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types[app2_node].owners }}"
    filters:
      name: "{{ ec2_instance_types[app2_node].filter }}"
      architecture: "{{ ec2_instance_types[app2_node].architecture }}"
  register: amis

- name: save ami for app1
  set_fact:
    app2_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for app2
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types[app2_node].size }}"
    image: "{{ app2_ami.image_id }}"
    region: "{{ ec2_region }}"
    exact_count: "{{ student_total }}"
    count_tag:
      Workshop_app1: "{{ec2_name_prefix}}-app2"
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_instance_types[app1_node].disk_space }}"
        delete_on_termination: true
      - device_name: /dev/sda2
        volume_type: gp2
        volume_size: 100
        delete_on_termination: true
  register: app2_output

- name: Ensure tags are present for app1
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-student{{item.0 + 1}}-app2"
      Workshop_app2: "{{ec2_name_prefix}}-app2"
      Workshop: "{{ec2_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      Username: "{{ linklight_user }}"
      Info: "Username that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "{{student_total}}"
      short_name: "app2"
  with_indexed_items:
    - "{{ app2_output.instance_ids }}"
  when: app2_output.instance_ids is not none
